---
- name: Create rsyslog server
  gather_facts: yes
  hosts: masters[0]
  tasks:
    - set_fact:
        logging_namespace: "{{ openshift_logging_namespace | default('openshift-logging') }}"
        use_mux: "{{ openshift_logging_use_mux|default(False)}}"
        deployname1: "rsyslog"
        deployname2: "rsyslogback"
        deployname: "rsyslog"
        test_clear: "{{ test_clear | default('false') }}"

    - name: Install internal rsyslog server
      block:
        - name: Copy deployment configure template
          template:
            src: internal-dc-rsyslog.yaml.j2
            dest: /tmp/internal-dc-rsyslog.yaml
            force: true

        - name: Create deployment configuire controller
          command: "oc create -f /tmp/internal-dc-rsyslog.yaml  -n {{logging_namespace}}"

        - name: expose dc as service
          command: "oc expose dc {{ deployname}} -n  {{logging_namespace}}"
    
        - name:  Get Service IP
          command: "oc get service {{deployname}} -o custom-columns=IP:.spec.clusterIP -n  {{logging_namespace}}"
          register: serviceip_result

        - set_fact:
             serviceip1: "{{ serviceip_result.stdout_lines[1] }}" 
             deployname: "{{deployname2}}"

        - name: Copy deployment configure template to deploy rsyslog_backup
          template:
            src: internal-dc-rsyslog.yaml.j2
            dest: /tmp/internal-dc-rsyslog.yaml
            force: true

        - name: Create rsyslog_backup deployment controller
          command: "oc create -f /tmp/internal-dc-rsyslog.yaml  -n {{logging_namespace}}"

        - name: expose rsyslog_backup dc as service
          command: "oc expose dc {{ deployname}} -n  {{logging_namespace}}"

        - name:  Get rsyslog_backup Service IP
          command: "oc get service {{deployname}} -o custom-columns=IP:.spec.clusterIP -n  {{logging_namespace}}"
          register: serviceip2_result

        - set_fact:
             serviceip2: "{{ serviceip2_result.stdout_lines[1] }}" 

        - name: Change fluentd DS
          command: "oc set env ds/logging-fluentd USE_REMOTE_SYSLOG=true REMOTE_SYSLOG_HOST={{serviceip1}} REMOTE_SYSLOG_HOST_BACKUP={{serviceip2}} REMOTE_SYSLOG_PORT_BACKUP=514  -n {{logging_namespace}}"
          when: not use_mux

        - name: Change mux DC
          command: "oc set env dc/logging-mux USE_REMOTE_SYSLOG=true REMOTE_SYSLOG_HOST={{serviceip1}} REMOTE_SYSLOG_HOST_BACKUP={{serviceip2}} REMOTE_SYSLOG_PORT_BACKUP=514  -n {{logging_namespace}}"
          when: use_mux
      when: not test_clear

    - name: Uninstall internal forward fluentd
      block:
        - name: delete deployment configuire controller
          command: "oc delete dc {{deployname1}}  -n {{logging_namespace}}"
          ignore_errors: True
        - name: delete service
          command: "oc delete service {{deployname1}}  -n {{logging_namespace}}"
          ignore_errors: True
        - name: delete deployment configuire controller
          command: "oc delete dc {{deployname2}}  -n {{logging_namespace}}"
          ignore_errors: True
        - name: delete service
          command: "oc delete service {{deployname2}}  -n {{logging_namespace}}"
          ignore_errors: True
        - name: Change fluentd DS Env back
          command: "oc set env ds/logging-fluentd  USE_REMOTE_SYSLOG- REMOTE_SYSLOG_HOST- REMOTE_SYSLOG_HOST_BACKUP- REMOTE_SYSLOG_PORT_BACKUP- -n {{logging_namespace}}"
          ignore_errors: True
          when: not use_mux
        - name: Change mux DC Env back
          command: "oc set env dc/logging-mux  USE_REMOTE_SYSLOG- REMOTE_SYSLOG_HOST- REMOTE_SYSLOG_HOST_BACKUP- REMOTE_SYSLOG_PORT_BACKUP-  -n {{logging_namespace}}"
          when: use_mux
      when: test_clear

    - name: refresh fluentd pod
      command: "oc delete pod --selector component=fluentd -n  {{logging_namespace}}"
      when: not use_mux
