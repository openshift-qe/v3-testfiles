#!/bin/bash
# check the es status and resource

if [ ! -e admin.kubeconfig ]; then
   master=$(grep openshift_logging_master_public_url hosts | cut -d"=" -f2)
   master=${master:-\$master_public_url}
   echo "no admin.kubeconfig in current directory,please login as cluster-admin"
   echo "oc login $master admin.kubeconfig"
   exit 1
fi
export KUBECONFIG=admin.kubeconfig

logging_namespace=${logging_namespace:-openshift-logging}
oc project $logging_namespace

function access_module()
{

# curl via ES key in ES
curl_via_es="oc exec -c elasticsearch $es_pod_name -- curl -s --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key https://logging-es:9200"

# curl via fluentd key in Fluentd
fluentd_pod_name=$(oc get pods --selector component=fluentd -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
curl_via_fluentd="oc exec $fluentd_pod_name -- curl -s --cacert /etc/fluent/keys/ca --cert /etc/fluent/keys/cert --key /etc/fluent/keys/key https://logging-es:9200"

# curl via admin token via internal domain name
curl_via_token="oc exec $fluentd_pod_name curl -kv -H \"Authorization: Bearer `oc whoami -t`\" https://logging-es.logging.svc.cluster.local:9200"

# curl via admin token via ES route externally.
curl_via_cmd=$curl_via_es
}



es_pod1_name=$(oc get pods --selector component=es -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
if [ -z ${es_pod1_name} ]; then
   echo "No running ES pod can be found"
   exit
fi

es_ops_pod1_name=$(oc get pods --selector component=es-ops -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name}| cut -d" " -f1)

fluentd_pod1_name=$(oc get pods --selector component=es -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
if [ -z ${es_pod1_name} ]; then
   echo "No running ES pod can be found"
   exit
fi



function get_in_es()
{
   cur_pod_name=$1
   shift
   cur_action=$*
   cmd="oc exec -c elasticsearch $cur_pod_name -- curl -s --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key -X GET https://localhost:9200/${cur_action} 
   echo $cmd
   $cmd
   echo ""
}

function get_indices()
{
   cur_pod_name=$1
   get_in_es $cur_pod_name _cat/indices?v
}

function get_health()
{
    cur_pod_name=$1
    get_in_es $cur_pod_name _cluster/health?pretty
}

function get_index_setting()
{
    cur_pod_name=$1
    index_name=$2
    cmd="oc exec -c elasticsearch $cur_pod_name -- curl -s --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key -XGET  https://localhost:9200/${index_name}*/_settings?pretty"
    echo $cmd
    $cmd
    echo " "
}

function get_docs()
{
    cur_pod_name=$1
    cur_index_name=$2
    get_in_es $cur_pod_name ${cur_index_name}*/_count?pretty
}



function search_docs()
{   
    #No space in json string
    cur_pod_name=$1
    cur_index_name=$2
    cur_key=$3
    cur_value=$4
    get_in_es ${cur_pod_name} ${cur_index_name}*/_count?pretty -d '{ "query" : { "match" : { "${cur_key}" : "${cur_value}" } } }'

}

echo "-->1. list index in first node --< "
get_indices $es_pod1_name

if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "-->1.1 list ops index in first node --< "
    get_indices $es_ops_pod1_name
fi

echo "-->1. get health in first node --< "
get_health $es_pod1_name

if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "--> get health in first node --< "
    get_health $es_ops_pod1_name
fi

#echo "-->3. list aliases in first node --< "
#get_in_es $es_pod1_name  _aliases?pretty

#if [[ -n ${es_ops_pod1_name} ]] ; then
#    echo "-->3.1 list aliases in first node --< "
#    get_in_es $es_ops_pod1_name  _aliases?pretty
#fi

echo "-->4. List ES swallow status "
get_in_es $es_pod1_name  _cat/thread_pool?v\&h=host,bulk.completed,bulk.rejected,bulk.queue,bulk.active,bulk.queueSize
if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "-->4.1 list ES-ops swallow status --< "
    get_in_es $es_ops_pod1_name  _cat/thread_pool?v\&h=host,bulk.completed,bulk.rejected,bulk.queue,bulk.active,bulk.queueSize
fi

#echo "-->4. check if there are event router documents --< "
#
#event_pod1_name=$(oc get pods --selector component=eventrouter -n default -o jsonpath={.items[?\(@.status.phase==\"Running\"\)].metadata.name} | cut -d" " -f1)
#if [[ -n ${es_ops_pod1_name} ]] ; then
#     get_in_es $es_ops_pod1_name .operations/_search??pretty&size=10&q=kubernetes.pod_name:"$event_pod1_name"
#else
#     get_in_es $es_ops_pod1_name .operations/_search??pretty&size=10&q=kubernetes.pod_name:"$event_pod1_name"
#fi

#echo "-->5. check if there are logs for all nodes --< "
#nodes=$(oc get nodes --output=name)
#for node in $nodes; do
#    node_name=${node#*\/}
#    echo "-->5.1 check if there are logs for all nodes in operations--< "
#    if [[ -n ${es_ops_pod1_name} ]] ; then
#       search_docs "$es_ops_pod1_name" '.operations' "hostname" "$node_name"
#    else
#       search_docs "$es_pod1_name" '.operations' "hostname" "$node_name"
#    fi
#done

#echo "-->6. check if there are docker event router documents --< "
#if [[ -n ${es_ops_pod1_name} ]] ; then
#     search_docs "$es_ops_pod1_name" '.operations' "dcoker.event.verb" "created"
#else
#     search_docs "$es_pod1_name" '.operations' "docker.event.verb" "created"
#fi

echo "-->7. List Shards status"
get_in_es $es_pod1_name  _cat/shards
if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "-->7.1 list ES-ops swallow status --< "
    get_in_es $es_ops_pod1_name  _cat/shards
fi


echo "-->8. list the index number of .operations --< "
if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "-->8.x get .operations index setting--< "
    get_index_setting $es_ops_pod1_name .operations
else
    echo "-->8.x get .operations index setting--< "
    get_index_setting $es_pod1_name .operations
fi

echo "-->9 get .operations index setting--< "
get_index_setting $es_pod1_name '.orphaned'


echo "-->10 Checking with token--< "
get_index_setting $es_pod1_name '.orphaned'
