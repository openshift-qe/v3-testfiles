#!/bin/bash
#set -x
# Gather logging data for upgrade

# Check if clusteradmin user in currectory directory
if [ ! -e admin.kubeconfig ]; then
   master=$(grep openshift_logging_master_public_url hosts | awk -F"=" '{print $2}')
   master=${master:-\$master_public_url}
   echo "no admin.kubeconfig in current directory,please login as cluster-admin"
   echo "oc login $master admin.kubeconfig"
   exit 1
fi
export KUBECONFIG=admin.kubeconfig


# Create data directory
log_date=$(date +%Y%m%d%H%M)
log_dir=data/logging/$log_date
mkdir -p $log_dir

# change namespaces to correct namespaces, Note that, Please don't change the namespaces when this scripts in running
logging_namespace=$(grep -E "^openshift_logging_namespace=" hosts | awk -F"=" '{print $2}')
logging_namespace=${logging_namespace:-openshift-logging}
oc project $logging_namespace 


# Get one running pods
es_pods=$(oc get pod -l component=es,provider=openshift -o jsonpath={.items[?\(\@.status.phase==\"Running\"\)].metadata.name}  --config admin.kubeconfig)
es_pods=$(oc get pods --selector component=es -o name)
if [[ ${#es_pods} == 0 ]]; then
   echo "No running ES pod can be found"
   exit
fi

es_pod1_name=(${es_pods[0]#*\/})
es_ops_pods=$(oc get pods --selector component=es-ops -o name)
es_ops_pod1_name=(${es_ops_pods[0]#*\/})

function get_in_es()
{
   cur_pod_name=$1
   shift
   cur_action=$*
   cmd="oc exec --config admin.kubeconfig -c elasticsearch $cur_pod_name -- curl -s -XGET --cacert /etc/elasticsearch/secret/admin-ca --cert /etc/elasticsearch/secret/admin-cert --key /etc/elasticsearch/secret/admin-key https://localhost:9200/${cur_action}"
   echo $cmd
   $cmd
   echo ""
}

function get_indices()
{
   cur_pod_name=$1
   get_in_es $cur_pod_name _cat/indices?v
}

function get_health()
{
    cur_pod_name=$1
    get_in_es $cur_pod_name _cluster/health?pretty
}

function get_docs()
{
    cur_pod_name=$1
    cur_index_name=$2
    get_in_es $cur_pod_name ${cur_index_name}*/_count?pretty
}

function search_docs()
{
    #No space in json string
    cur_pod_name=$1
    cur_index_name=$2
    cur_key=$3
    cur_value=$4
    get_in_es ${cur_pod_name} ${cur_index_name}*/_count?pretty -d '{ "query" : { "match" : { "${cur_key}" : "${cur_value}" } } }'

}

echo "-->1. list index in first es pod --< "
get_indices $es_pod1_name |tee $log_dir/logging_es_index

if [[ -n ${es_ops_pod1_name} ]] ; then
    echo "-->1.x list ops index in first ops es pod --< "
    get_indices $es_ops_pod1_name |tee $log_dir/logging_es_ops_index
fi

echo "-->2. get ES health in first node --< "
get_health $es_pod1_name | tee $log_dir/logging_es_index_health

echo "-->3. list project resouce --< "
oc get all |tee $log_dir/logging_list_all
oc get serviceaccount |tee $log_dir/logging_list_serviceaccount
oc get secret | tee $log_dir/logging_list_secret
oc get scc -o yaml | tee $log_dir/logging_scc
oc get rolebindings -o yaml | tee $log_dir/logging_rolebindings
oc get event |tee $log_dir/logging_list_event
oc get ds -o yaml |tee $log_dir/logging_ds.yml
oc get dc --selector component=curator -o yaml |tee $log_dir/logging_dc_curator.yml
oc get dc --selector component=curator-ops -o yaml |tee $log_dir/logging_dc_curator-ops.yml
oc get dc --selector component=es -o yaml |tee $log_dir/logging_dc_es.yml
oc get dc --selector component=es-ops -o yaml |tee $log_dir/logging_dc_es-ops.yml
oc get dc --selector component=kibana -o yaml |tee $log_dir/logging_dc_kibana.yml
oc get dc --selector component=kibana-ops -o yaml |tee $log_dir/logging_dc_kibana-ops.yml
oc get configmap logging-curator -o yaml |tee $log_dir/logging_configmap_curator.yml
oc get configmap logging-elasticsearch -o yaml |tee $log_dir/logging_configmap_logging-elasticsearch.yml
oc get configmap logging-elasticsearch-ops -o yaml |tee $log_dir/logging_configmap_logging-elasticsearch-ops.yml
oc get configmap logging-fluentd -o yaml |tee $log_dir/logging_configmap_logging-logging-fluentd.yml
oc get pvc -o yaml |tee $log_dir/logging_pvc.yml
oc get nodes --show-labels |tee $log_dir/logging_node_label
oc get pods --selector component=es -o yaml| tee $log_dir/logging_es_pod.yml
oc get pods --selector component=curator -o yaml|tee $log_dir/logging_curator_pod.yml
oc get pods --selector component=kibana -o yaml|tee $log_dir/logging_kibana_pod.yml
oc get pods --selector component=fluentd -o yaml|tee $log_dir/logging_fluentd_pod.yml
oc get deploymentconfigs/logging-eventrouter -n default -o yaml |tee $log_dir/logging-eventrouter_dc.yml
oc get pod --selector component=eventrouter -n default -o yaml | tee $log_dir/logging-eventrouter_pod.yml
oc get configmap logging-eventrouter -n default -o yaml |tee $log_dir/logging-eventrouter_configmap.yml
